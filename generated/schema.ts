// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Gem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Gem entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Gem entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Gem", id.toString(), this);
  }

  static load(id: string): Gem | null {
    return store.get("Gem", id) as Gem | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get psi(): BigInt {
    let value = this.get("psi");
    return value.toBigInt();
  }

  set psi(value: BigInt) {
    this.set("psi", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get burned(): boolean {
    let value = this.get("burned");
    return value.toBoolean();
  }

  set burned(value: boolean) {
    this.set("burned", Value.fromBoolean(value));
  }

  get forgeTime(): BigInt {
    let value = this.get("forgeTime");
    return value.toBigInt();
  }

  set forgeTime(value: BigInt) {
    this.set("forgeTime", Value.fromBigInt(value));
  }

  get forgeBlock(): BigInt {
    let value = this.get("forgeBlock");
    return value.toBigInt();
  }

  set forgeBlock(value: BigInt) {
    this.set("forgeBlock", Value.fromBigInt(value));
  }

  get number(): BigInt {
    let value = this.get("number");
    return value.toBigInt();
  }

  set number(value: BigInt) {
    this.set("number", Value.fromBigInt(value));
  }

  get activated(): boolean {
    let value = this.get("activated");
    return value.toBoolean();
  }

  set activated(value: boolean) {
    this.set("activated", Value.fromBoolean(value));
  }
}

export class LastForgedNumber extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LastForgedNumber entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LastForgedNumber entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LastForgedNumber", id.toString(), this);
  }

  static load(id: string): LastForgedNumber | null {
    return store.get("LastForgedNumber", id) as LastForgedNumber | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get number(): BigInt {
    let value = this.get("number");
    return value.toBigInt();
  }

  set number(value: BigInt) {
    this.set("number", Value.fromBigInt(value));
  }
}
